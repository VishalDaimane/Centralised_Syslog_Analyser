input {
  beats {
    port => 5044
    host => "0.0.0.0"
    codec => json { ecs_compatibility => disabled }
    tags => ["from_filebeat"]
  }
}

filter {
  json {
    source => "message"
    remove_field => ["message"]
    skip_on_invalid_json => true
  }

  date {
    match => ["ISODATE", "ISO8601"]
    target => "@timestamp"
    remove_field => ["ISODATE"]
  }

  # Process all log levels, not just errors
  if [PRIORITY] {
    mutate {
      add_field => { "log_level" => "%{PRIORITY}" }
    }
  }

  mutate {
    rename => {
      "MESSAGE" => "message"
      "HOST" => "host_name"
      "PROGRAM" => "program"
      "PRIORITY" => "priority"
      "FACILITY" => "facility"
      "PID" => "pid"
      "SOURCEIP" => "source_ip"
      "TRANSPORT" => "transport"
      "SOURCE" => "source_type"
    }
    remove_field => ["@version", "tags"]
  }
}

output {
  stdout { codec => rubydebug }
  
  opensearch {
    hosts => ["https://opensearch:9200"]
    index => "syslog-%{+YYYY.MM.dd}"
    user => "admin"
    password => "MyStrongPassword123!"
    ssl => true
    ssl_certificate_verification => false
    template => "/usr/share/logstash/templates/syslog-template.json"
    template_name => "syslog"
    template_overwrite => true
    ecs_compatibility => disabled
  }
  
  # Dead Letter Queue for failed documents
  if "_opensearchfailure" in [tags] {
    file {
      path => "/usr/share/logstash/data/dead_letter_queue/%{+yyyy-MM-dd}-dlq.log"
    }
  }
}
