# Logstash configuration file for processing logs
input {
  beats {
    port => 5044
    tags => ["from_filebeat"]
  }

  tcp {
    port => 5000
    codec => json
    tags => ["from_tcp"]
  }
}

filter {
  grok {
    match => {
      "message" => "\[%{TIMESTAMP_ISO8601:log_timestamp}\]\[%{LOGLEVEL:log_level}\s*\]\[%{DATA:class}\] \[%{DATA:container}\] %{GREEDYDATA:log_message}"
    }
    add_tag => ["grok_attempted"]
    break_on_match => false
  }

  if "_grokparsefailure" in [tags] {
    mutate {
      add_field => { "grok_error" => "Failed to parse: %{message}" }
    }
  }

  grok {
    match => {
      "class" => "com\.myapp\.%{WORD:module_name}\."
    }
    tag_on_failure => ["module_extract_failed"]
  }

  date {
    match => ["log_timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["log_timestamp"]
  }

  ruby {
    code => '
      timestamp = event.get("@timestamp").time
      start_date = Time.new(2025, 4, 4, 0, 0, 0, "+00:00")
      end_date = Time.new(2025, 4, 8, 0, 0, 0, "+00:00")
      if timestamp < start_date || timestamp >= end_date
        event.cancel()
      end
    '
  }

  # Filter only WARN logs
#  if [log_level] != "WARN" {
 #   drop { }
  #}

  mutate {
    add_field => {
      "team" => "backend"
      "environment" => "dev"
    }
  }

  # Assign source_type and index_name based on input origin
  if "from_filebeat" in [tags] {
    mutate {
      add_field => {
        "source_type" => "filebeat"
      }
      replace => {
        "index_name" => "filebeat-logs"
      }
    }
  }

  if "from_tcp" in [tags] {
    mutate {
      add_field => {
        "source_type" => "tcp"
      }
      replace => {
        "index_name" => "tcp-logs"
      }
    }
  }

  if "grok_attempted" in [tags] {
    mutate {
      add_field => { "log_parsing" => "grok_successful" }
    }
  }
}

output {
  if "from_tcp" in [tags] {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }

  # opensearch {
  #   hosts => ["https://opensearch:9200"]
  #   index => "%{index_name}-%{+YYYY.MM.dd}"
  #   user => "admin"
  #   password => "MyStrongPassword123!"
  #   ssl => true
  #   ssl_certificate_verification => false
  # }
  opensearch {
    hosts => ["https://opensearch:9200"]
    index => "syslog-%{+YYYY.MM.dd}"
    user => "admin"
    password => "MyStrongPassword123!"
    ssl => true
    ssl_certificate_verification => false
    template => "/usr/share/logstash/templates/syslog-template.json"
    template_name => "syslog"
    template_overwrite => true
  }
}
