@version: 4.8
@include "scl.conf"
@define allow-config-dups 1

options {
    create-dirs(yes);
    keep-hostname(yes);
    time-reap(30);
    stats(freq(0));
    threaded(yes);
    use-dns(no);
    log-fifo-size(100000);
    chain-hostnames(off);
    flush-lines(1);
    use-fqdn(no);
    owner("root");
    group("root");
    perm(0640);
    bad-hostname("^gconfd$");
};

# ================= SOURCES =================
source s_network_udp {
    network(
        ip(0.0.0.0)
        port(514)
        transport("udp")
        so-rcvbuf(8192)
    );
};

source s_network_tcp {
    network(
        ip(0.0.0.0)
        port(514)
        transport("tcp")
        max-connections(100)
        log-iw-size(10000)
    );
};

source s_local {
    internal();
};

# Commented out to avoid errors
# source s_docker {
#     wildcard-file(
#         base-dir("/var/lib/docker/containers")
#         filename-pattern("*.log")
#         follow-freq(1)
#         flags(no-parse)
#         recursive(no)
#         tags("docker")
#     );
# };

# ================= DESTINATIONS =================
destination d_combined {
    file("/var/log/combined.log");
};

destination d_logs {
    file("/var/log/messages.log");
};

destination d_docker {
    file("/var/log/docker_containers.log"
        template("${ISODATE} ${HOST} ${MSGHDR}${MSG}\n")
    );
};

destination d_network {
    file("/var/log/network/$YEAR-$MONTH-$DAY.log");
};

destination d_remote_logs {
    file("/var/log/remote/${HOST}.log"
        create-dirs(yes)
    );
};

# Critical destination for Filebeat to pick up
destination d_filebeat {
  file(
    "/var/log/syslog-ng-for-filebeat/filebeat-input.json"
    template('{
      "ISODATE": "$S_ISODATE",
      "MESSAGE": "$MESSAGE",
      "HOST": "$HOST",
      "PROGRAM": "$PROGRAM",
      "PRIORITY": "$PRIORITY",
      "FACILITY": "$FACILITY",
      "PID": "$PID",
      "SOURCEIP": "$SOURCEIP",
      "TRANSPORT": "$TRANSPORT",
      "SOURCE": "$SOURCE"
    }\n')
  );
};

# ================= LOG PATHS =================
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_local);
    destination(d_combined);
};

log {
    source(s_network_udp);
    source(s_network_tcp);
    destination(d_logs);
};

log {
    source(s_network_udp);
    source(s_network_tcp);
    destination(d_network);
};

# Commented out to avoid errors
# log {
#     source(s_docker);
#     destination(d_docker);
# };

# Most important path that sends logs to Filebeat
# Include all log levels, not just errors
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_local);
    destination(d_filebeat);
};
